= Android
Jetpack
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="jetpack.css" type="text/css" />

== Jetpack c'est quoi ?
Un ensemble de librairies et bonnes pratiques pour le développement Android:

- Foundation
- Architecture
- Behavior
- UI

Toute la documentation se trouve ici : https://developer.android.com/jetpack


== Foundation
Les grosses briques de base pour le développement

- AppCompat
- KTX
- MultiDex
- Tests

== Architecture
Beaucoup de choses ici, voyons déjà ensemble les patterns de développement préconisés.

== MVC
A la fois le plus basique et classique mais dur à cerner.

image:images/mvc.png[Pattern MVC]

Juste une combinaison de patterns. Les reconnaissez-vous ?


== MVC
A la fois le plus basique et classique mais dur à cerner.

image:images/mvc2.png[Pattern MVC]


== MVP

- Vue vraiment découplée du modèle
- Le Presenter a la responsabilité de relier le modèle et la vue
- Plus facile à tester


== Comparaison MVC / MVP

image:images/mvc-vs-mvp.png[Comparaison MVC/MVP]

== MVVM

Parce qu'on n'en avait encore pas assez avec MVC et MVP...

Le ViewModel a pour vocation à faire le pont entre les données du modèle et leur présentation dans la vue.
En général il est composé de deux choses :

- des propriétés que la vue peut requêter ou observer
- des actions (méthodes) que la vue peut appeler


== ViewModel

- Survit aux changements de configuration.
- Simplifie grandement la gestion des appels asynchrones

[source,java]
public class ReposViewModel extends ViewModel {
    private MutableLiveData<List<Repo>> repos;
    public LiveData<List<Repo>> getRepos() {
        if (repos == null) {
            repos = new MutableLiveData<>();
            loadRepos();
        }
        return repos;
    }
    private void loadRepos() {
        // Appel asynchrone pour charger les repos
    }
}

== ViewModel (instanciation)

[source,java]
public class ReposActivity extends AppCompatActivity {
    public void onCreate(Bundle savedInstanceState) {
	// Si ce ViewModel n'a jamais été instancié, on le créée
	// Sinon on le récupère dans le ViewModelProvider
        ReposViewModel model = 
		ViewModelProviders.of(this).get(ReposViewModel.class);
        model.getRepos().observe(this, repos -> {
            // On met à jour l'UI ici
        });
    }
}

CAUTION: Le ViewModel ne doit jamais avoir de lien vers la vue (sinon leak)


== LiveData

Vous avez sûrement remarqué l'utilisation de la classe LiveData dans l'exemple précédent.
C'est l'équivalent (en moins puissant) des observables RxJava.

On peut observer (avec la méthode 'observe') les valeurs émises (avec 'value' ou 'postValue')


== Data Binding library

Liaison directe de données dans le XML.

Très souvent utilisé conjointement avec un ViewModel.

Il faut pour cela faire plusieurs choses.

== Data Binding (build.gradle)

On déclare que notre application utilise du data binding.

[source,groovy]
android {
    ...
    dataBinding {
        enabled = true
    }
}

== Data Binding (layout)

On définit les données injectées dans le layout.

[source,xml]
<layout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto">
    <data>
        <variable
            name="viewmodel"
            type="com.myapp.data.ViewModel" />
    </data>
    <ConstraintLayout... /> <!-- UI layout's root element -->
</layout>


== Data Binding (layout)

On les appelle depuis l'intérieur du layout.

[source,xml]
<TextView android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@{user.firstName, default=my_default}"/>


== Data Binding (Activity)

Il faut qu'on injecte dans notre layout les éléments en question.

[source,java]
class ViewModelActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // On instancie le ViewModel
        UserModel userModel = ViewModelProviders.of(getActivity())
                                                  .get(UserModel.class);
        // Inflate de la vue et récupération de la classe de binding
        UserBinding binding =
		DataBindingUtil.setContentView(this, R.layout.user);
        // On renseigne la propriété de la classe de binding
        binding.viewmodel = userModel;
    }
}


== Data Binding (extras)

Les Binding Adapters permettent de définir de nouvelles propriétés sur vos classes bindées.

[source,java]
@BindingAdapter("app:goneUnless")
public static void goneUnless(View view, Boolean visible) {
    view.visibility = visible ? View.VISIBLE : View.GONE;
}


== Room

Une base de données moderne, avec support des LiveData.

On va aller jeter un oeil au code ça ira plus vite !


== En composant tout, offline-first

image:images/flow.png[Room flow]

